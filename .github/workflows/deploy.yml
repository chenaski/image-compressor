name: Deploy

on:
  push:
  pull_request:

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Cancel previous runs
        uses: styfle/cancel-workflow-action@0.10.0

      - name: Checkout
        uses: actions/checkout@v3

      - uses: pnpm/action-setup@v2.2.2
        with:
          version: 7

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: pnpm

      - name: Install deps
        run: pnpm install

      - name: Prettier
        run: pnpm format

      - name: ESLint
        run: pnpm lint

  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - app_name: website
          - app_name: backend-api
    steps:
      - name: Cancel previous runs
        uses: styfle/cancel-workflow-action@0.10.0

      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v3
        env:
          repository: ${{ secrets.DOCKERHUB_USERNAME }}/image-compressor-${{ matrix.app_name }}
          tags: ${{ github.ref_name }}-${{ github.sha }}
          cache_tag: buildcache
        with:
          file: apps/${{ matrix.app_name }}/Dockerfile
          push: true
          tags: ${{ env.repository }}:${{ env.tags }},${{ env.repository }}:latest
          cache-from: type=registry,ref=${{ env.repository }}:${{ env.cache_tag }}
          cache-to: type=registry,ref=${{ env.repository }}:${{ env.cache_tag }},mode=max

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Cancel previous runs
        uses: styfle/cancel-workflow-action@0.10.0

      - name: Checkout
        uses: actions/checkout@v3

      - name: Create production .env files
        env:
          DOMAIN: ${{ secrets.DOMAIN }}
          COMPOSE_PROJECT_NAME: image-compressor
          WEBSITE_IMAGE_REPO: ${{ secrets.DOCKERHUB_USERNAME }}/image-compressor-website
          WEBSITE_IMAGE_TAG: ${{ github.ref_name }}-${{ github.sha }}
          WEBSITE_PORT: ${{ secrets.WEBSITE_PORT }}
          WEBSITE_ENV_FILE: ${{ secrets.WEBSITE_ENV_FILE }}
          WEBSITE_ENV_FILE_PATH: '.env.website'
          BACKEND_API_IMAGE_REPO: ${{ secrets.DOCKERHUB_USERNAME }}/image-compressor-backend-api
          BACKEND_API_IMAGE_TAG: ${{ github.ref_name }}-${{ github.sha }}
          BACKEND_API_PORT: ${{ secrets.BACKEND_API_PORT }}
        run: |
          export WEBSITE_IMAGE_REPO="$WEBSITE_IMAGE_REPO"
          export WEBSITE_IMAGE_TAG="$WEBSITE_IMAGE_TAG"
          export WEBSITE_PORT="$WEBSITE_PORT"
          export WEBSITE_ENV_FILE="$WEBSITE_ENV_FILE"
          export WEBSITE_ENV_FILE_PATH="$WEBSITE_ENV_FILE_PATH"
          export BACKEND_API_IMAGE_REPO="$BACKEND_API_IMAGE_REPO"
          export BACKEND_API_IMAGE_TAG="$BACKEND_API_IMAGE_TAG"
          export BACKEND_API_PORT="$BACKEND_API_PORT"

          envsubst < .env.production > .env

          echo "$WEBSITE_ENV_FILE" > $WEBSITE_ENV_FILE_PATH

      - name: Setup release dir
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: docker-compose.yml,.env,.env.website
          target: releases/${{ github.sha }}

      - name: Pull new images and restart
        uses: appleboy/ssh-action@master

        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd releases/${{ github.sha }}

            docker compose pull
            docker compose up -d
