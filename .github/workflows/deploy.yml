name: Deploy

on:
  push:
    branches:
      - main

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Cancel previous runs
        uses: styfle/cancel-workflow-action@0.10.0

      - name: Checkout
        uses: actions/checkout@v3

      - uses: pnpm/action-setup@v2.2.2
        with:
          version: 7

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: pnpm

      - name: Install deps
        run: pnpm install

      - name: Prettier
        run: pnpm format

      - name: ESLint
        run: pnpm lint

  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - app_name: website
          - app_name: backend-api
          - app_name: image-processor
    steps:
      - name: Cancel previous runs
        uses: styfle/cancel-workflow-action@0.10.0

      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v3
        env:
          repository: ${{ secrets.DOCKERHUB_USERNAME }}/image-compressor-${{ matrix.app_name }}
          tags: ${{ github.ref_name }}-${{ github.sha }}
          cache_tag: buildcache
        with:
          file: apps/${{ matrix.app_name }}/Dockerfile
          push: true
          tags: ${{ env.repository }}:${{ env.tags }},${{ env.repository }}:latest
          cache-from: type=registry,ref=${{ env.repository }}:${{ env.cache_tag }}
          cache-to: type=registry,ref=${{ env.repository }}:${{ env.cache_tag }},mode=max

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Cancel previous runs
        uses: styfle/cancel-workflow-action@0.10.0

      - name: Checkout
        uses: actions/checkout@v3

      - name: Create production .env files
        env:
          DOMAIN: ${{ secrets.DOMAIN }}
          COMPOSE_PROJECT_NAME: image-compressor
          CERTBOT_PATH: ${{ secrets.CERTBOT_PATH }}
          WEBSITE_IMAGE_REPO: ${{ secrets.DOCKERHUB_USERNAME }}/image-compressor-website
          WEBSITE_IMAGE_TAG: ${{ github.ref_name }}-${{ github.sha }}
          WEBSITE_PORT: ${{ secrets.WEBSITE_PORT }}
          WEBSITE_ENV_FILE: ${{ secrets.WEBSITE_ENV_FILE }}
          WEBSITE_ENV_FILE_PATH: '.env.website'
          BACKEND_API_IMAGE_REPO: ${{ secrets.DOCKERHUB_USERNAME }}/image-compressor-backend-api
          BACKEND_API_IMAGE_TAG: ${{ github.ref_name }}-${{ github.sha }}
          BACKEND_API_PORT: ${{ secrets.BACKEND_API_PORT }}
          IMAGE_PROCESSOR_IMAGE_REPO: ${{ secrets.DOCKERHUB_USERNAME }}/image-compressor-image-processor
          IMAGE_PROCESSOR_IMAGE_TAG: ${{ github.ref_name }}-${{ github.sha }}
          REDIS_STORE_PATH: ${{ secrets.REDIS_STORE_PATH }}
          REDIS_URL: ${{ secrets.REDIS_URL }}
        run: |
          export DOMAIN="$DOMAIN"
          export COMPOSE_PROJECT_NAME="$COMPOSE_PROJECT_NAME"
          export CERTBOT_PATH="$CERTBOT_PATH"
          export WEBSITE_IMAGE_REPO="$WEBSITE_IMAGE_REPO"
          export WEBSITE_IMAGE_TAG="$WEBSITE_IMAGE_TAG"
          export WEBSITE_PORT="$WEBSITE_PORT"
          export WEBSITE_ENV_FILE="$WEBSITE_ENV_FILE"
          export WEBSITE_ENV_FILE_PATH="$WEBSITE_ENV_FILE_PATH"
          export BACKEND_API_IMAGE_REPO="$BACKEND_API_IMAGE_REPO"
          export BACKEND_API_IMAGE_TAG="$BACKEND_API_IMAGE_TAG"
          export BACKEND_API_PORT="$BACKEND_API_PORT"
          export IMAGE_PROCESSOR_IMAGE_REPO="$IMAGE_PROCESSOR_IMAGE_REPO"
          export IMAGE_PROCESSOR_IMAGE_TAG="$IMAGE_PROCESSOR_IMAGE_TAG"
          export REDIS_STORE_PATH="$REDIS_STORE_PATH"
          export REDIS_URL="$REDIS_URL"

          envsubst < .env.production > .env
          echo "$WEBSITE_ENV_FILE" > $WEBSITE_ENV_FILE_PATH

          envsubst '$DOMAIN:$WEBSITE_PORT' < .docker/nginx/conf/app.conf > tmp.conf
          mv tmp.conf .docker/nginx/conf/app.conf

      - name: Setup SSH
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" | tr -d "\r" > ~/.ssh/id_ecdsa
          chmod 600 ~/.ssh/id_ecdsa
          ssh-keyscan -t ecdsa -H $SSH_HOST >> ~/.ssh/known_hosts

      - name: Prepare new release directory
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          RELEASE_DIR: ~/releases/${{ github.sha }}
        run: |
          ssh $SSH_USER@$SSH_HOST "mkdir -p $RELEASE_DIR"
          scp -r docker-compose.production.yml .docker .env .env.website $SSH_USER@$SSH_HOST:$RELEASE_DIR

      - name: Pull new images and restart
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          RELEASE_DIR: ~/releases/${{ github.sha }}
        run: |
          ssh $SSH_USER@$SSH_HOST "\
            cd $RELEASE_DIR && \
            mv docker-compose.production.yml docker-compose.yml && \
            docker compose pull && \
            docker compose up -d"
          echo "Done!"
